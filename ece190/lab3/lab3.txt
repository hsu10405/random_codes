Lab 3 Answers


Task 1, Answer the questions in the space provided

Q1) What is the result of the first computation when unsigned int is used to hold the two values ? Why ?
Hint: Signed int uses a 2's complement representation to store the negative values, unsigned int does not.
The result of -22u * 33u is 4294966570. The reason why this happens is because since both number are treated as positive numbers (unsigned number cannot represent negative values), -22 is treated as a very large number instead of a negative number. That's why we have such a large answer. 


Q2)What is the result of the 3rd computation when int is used to hold the two values ? Why ?
The answer displayed only integers. The decimal is cut off because the result is stored as an "int" instead of a float or double. int only holds integers.


Q3)What is the "%" operator doing ?
It's displaying the remainder of the expression. i.e. 10 % 3 yields 1.


Space for Answer 1 of bit shifting operation
The pattern is that in the for x<<y is that x is multiplied by 2^y and the result is stored as an int. The left-shift operation changes the number by shifting the number to the left by y bits.


Space for Answer 2 of bit shifting operation
The pattern is that in the form x>>y is that x is divided by 2^y and the result is stored as an int (10>>4 yields 0). The right-shift operation changes the number by shifting the number by y bits.


Questions on Bit-Wise logic

Q4)What are computations 1-3 doing ? (what does a function that computes f(x) = x & 1 do?)
For the first three computations the program is taking the hexadeciaml number (e.g. 0x3030) and AND it with the hexadecimal 0x1.


Q5)What are computations 4-6 doing ?
Computation 4-6 is shifting the hexadecimal by 4 bits and then AND it with hexadecimal 0x1. 


Q6)Why does computation 7 produce a nonzero result, but computation 8 produces zero?
    In computation 7, 0x0080 is present in the OR statement. So after the OR calculation, 0x0080 is still there. So when the AND statement comes in, the other 0x0080 is able to find the 0x0080 in the first expression and thus output with a nonzero answer. In computation 8 however 0x0080 is not present in the OR statement. So the other 0x0080 couldn't find the 0x0080 in the first expression and thus output with a 0.


Q7)What is computation 9 doing? (what does a function that computes f(x) = x & ~1 do?)
computation 9 is has having the hexadecimal AND with NOT 0x1. So the result
will be 0 since anything AND with 0 is 0.
